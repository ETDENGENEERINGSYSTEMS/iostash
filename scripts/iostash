#!/bin/bash

MODULE_NAME="iostash"

SYSFS_CTL_DIR="/sys/module/$MODULE_NAME/$MODULE_NAME-ctl"
SYSFS_CACHES_DIR="/sys/module/$MODULE_NAME/caches"
SYSFS_TARGETS_DIR="/sys/module/$MODULE_NAME/targets"
CACHE_CTL_FILE="$SYSFS_CTL_DIR/caches"
TARGET_CTL_FILE="$SYSFS_CTL_DIR/targets"

usage () {
    echo "----------------------------------------------------------------------"
    echo "iostash"
    echo "Host-side Flash-based Caching"
    echo "Version 0.1"
    echo "https://github.com/ibm-research/iostash"
    echo "----------------------------------------------------------------------"
    echo ""
    echo "Usage: "
    echo "$0 <class> <action> <object>"
    echo ""
    echo "iostash supports the following classes:"
    echo ""
    echo "cache"
    echo "  Control the devices being used for caching."
    echo "    Actions:"
    echo "    add     <object=device>      Add a new SSD device to the cache"
    echo "    remove  <object=device>      Remove an SSD device from the cache"
    echo "    list    <>                   List SSDs devices used by the cache"
    echo ""
    echo "target"
    echo "  Control which backend devices to cache from."
    echo "    Actions:"
    echo "    add     <object=device>      Start caching from a target device"
    echo "    remove  <object=device>      Stop caching from a target device"
    echo "    stat    <object=device>      Print statistics for a target device"
    echo "    list    <>                   List all target devices"
    echo ""
    echo "global"
    echo "  Control global properties of iostash."
    echo "    Actions:"
    echo "    stats   <>                   Print out global statistics."
    echo ""
    echo "version"
    echo "  Print the iostash version and exit"
    echo ""
    echo "help"
    echo "  Print these instructions and exit"
    echo "----------------------------------------------------------------------"
}

BRANCH_NAME="BRANCH_NAME_PH"
COMMIT_HASH="COMMIT_HASH_PH"
BUILD_DATE="BUILD_DATE_PH"
MD5SUM="MD5SUM_PH"

version () {
    echo "Branch Name: $BRANCH_NAME"
    echo "Commit     : $COMMIT_HASH"
    echo "Build Date : $BUILD_DATE"
}

check_ret()
{
  cur_ret_val=$?
  if [ $cur_ret_val -ne 0 ]
  then
    echo "ERROR: $* returned $cur_ret_val."
        exit $cur_ret_val
  fi
}

check_dev()
{
	if [ -z "$1" ];
    then
	echo "Device not specified."
	exit 1
    fi
    if [ ! -b "$1" ];
    then
	echo "$1 is not a block device."
	exit 1
    fi
}

get_sys_path()
{
	check_dev $1
	d=
	for t in $(ls "$SYSFS_TARGETS_DIR");
	do
		if [ "$1" = "$(cat $SYSFS_TARGETS_DIR/$t/name)" ];
		then
			d="$SYSFS_TARGETS_DIR/$t"
		fi
	done

	if [ -z "$d" ];
	then
		return
	else
		echo "$d"
	fi
}

print_stats ()
{
	msg="Statistics for $(cat $1/name)"
	echo $msg
 	for i in $(seq 1 ${#msg});
 	do
 		echo -n "-"
 	done
 	echo

 	ALLOCATED_SECTORS=$(grep "Allocated" $1/stats | cut -d":" -f2)
	VALID_SECTORS=$(grep "Valid" $1/stats | cut -d":" -f2)
	POPULATIONS=$(grep "Populations" $1/stats | cut -d":" -f2)
	READS=$(grep "Read I/Os" $1/stats | cut -d":" -f2)
	READ_SECTORS=$(grep "Read sectors" $1/stats | cut -d":" -f2)
	READ_HITS=$(grep "Read Cache Hits" $1/stats | cut -d":" -f2)
	WRITES=$(grep "Write I/Os" $1/stats | cut -d":" -f2)
	WRITE_SECTORS=$(grep "Write sectors" $1/stats | cut -d":" -f2)
	WRITE_HITS=$(grep "Write Invalidates" $1/stats | cut -d":" -f2)

	if [ -z "$ALLOCATED_SECTORS" ];	then echo "Bad statistics file"; exit 1; fi
	if [ -z "$VALID_SECTORS" ]; 	then echo "Bad statistics file"; exit 1; fi
	if [ -z "$POPULATIONS" ]; 		then echo "Bad statistics file"; exit 1; fi
	if [ -z "$READS" ]; 			then echo "Bad statistics file"; exit 1; fi
	if [ -z "$READ_SECTORS" ]; 		then echo "Bad statistics file"; exit 1; fi
	if [ -z "$READ_HITS" ]; 		then echo "Bad statistics file"; exit 1; fi
	if [ -z "$WRITES" ]; 			then echo "Bad statistics file"; exit 1; fi
	if [ -z "$WRITE_SECTORS" ]; 	then echo "Bad statistics file"; exit 1; fi
	if [ -z "$WRITE_HITS" ]; 		then echo "Bad statistics file"; exit 1; fi

	echo "S00  Cache Allocation MB : " "$(echo "$ALLOCATED_SECTORS / 2048" | bc)"

	if [ 0 -eq "$ALLOCATED_SECTORS" ];
	then
	echo "S01  Valid Data          : " "$(echo 0 | bc)"
	else
	echo "S01  Valid Data          : " "$(echo "scale=2; (100 * $VALID_SECTORS) / $ALLOCATED_SECTORS" | bc -l)%"
	fi

	echo "S02  Read I/Os           : " "$(echo $READS | bc)"

	echo "S03  Read MB             : " "$(echo $READ_SECTORS / 2048 | bc)"

	if [ 0 -eq "$READS" ];
	then
	echo "S04  Read Cache Hit Rate : " "$(echo 0 | bc)"
	else
	echo "S04  Read Cache Hit Rate : " "$(echo "scale=2; (100 * $READ_HITS) / $READS" | bc -l)%"
	fi

	echo "S05  Write I/Os          : " "$(echo $WRITES | bc)"

	echo "S06  Write MB            : " "$(echo $WRITE_SECTORS / 2048 | bc)"

	if [ 0 -eq "$WRITES" ];
	then
	echo "S07  Write Invalidations : " "$(echo 0 | bc)"
	else
	echo "S07  Write Invalidations : " "$(echo "scale=2; (100 * $WRITE_HITS) / $WRITES" | bc -l)%"
	fi
}

## Require superuser privileges
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Superuser privileges required. Aborting..."
    exit 1
fi


if [ $# -lt 1 ]
then
    usage
    exit
fi

MOD_LOADED=$(lsmod | grep $MODULE_NAME)

if [ -z "$MOD_LOADED" ];
then
    echo "Loading the $MODULE_NAME kernel module."
    modprobe "$MODULE_NAME"
    check_ret "$MODULE_NAME kernel module load."
fi

COMPONENT="$1"
ACTION="$2"
DEVNAME="$3"

case "$COMPONENT" in
    cache):
	case "$ACTION" in
		add):
		check_dev "$DEVNAME"
		echo "Adding $DEVNAME to the cache."
		echo "add $DEVNAME" > $CACHE_CTL_FILE
		;;

		remove):
		check_dev "$DEVNAME"
		echo "Removing $DEVNAME from the cache."
		echo "rm $DEVNAME" > $CACHE_CTL_FILE
		;;

		list):
		echo "Listing cache devices."
		DEVS=$(ls "$SYSFS_CACHES_DIR")
		for d in $DEVS;
		do
			cat "$SYSFS_CACHES_DIR/$d/name"
		done
		;;
		*):
		;;
		esac
	;;

    target):
	case "$ACTION" in
		add):
		check_dev "$DEVNAME"
		echo "Starting caching from $DEVNAME."
		echo "add $DEVNAME" > $TARGET_CTL_FILE
		;;

		remove):
		check_dev "$DEVNAME"
		echo "rm $DEVNAME" > $TARGET_CTL_FILE
		echo "Stopping caching from $DEVNAME."
		;;

		stat):
		check_dev "$DEVNAME"
		p=$(get_sys_path "$DEVNAME")
		if [ -z "$p" ];
		then
			echo "$DEVNAME is not a target device."
			exit 1
		fi
		print_stats $p
		;;

		list):
		echo "Listing target devices."
		DEVS=$(ls "$SYSFS_TARGETS_DIR")
		for d in $DEVS;
		do
			cat "$SYSFS_TARGETS_DIR/$d/name"
		done
		;;

		*):
		;;
	esac
	;;

    global):
	case "$ACTION" in
	    stats):
	    echo "Statistics per target device:"
	    echo
	    for d in $(ls $SYSFS_TARGETS_DIR);
	    do
			print_stats "$SYSFS_TARGETS_DIR/$d"
			echo
	    done
		;;
	    *)
		;;

	esac
	;;

    version):
	    version
	    exit 0
	    ;;

    help):
	 usage
	 exit 0
	 ;;

    md5sum):
	   # This one is hidden. It prints out the md5sum of iostash.ko
	   # at the time of the build.
	   echo $MD5SUM
	   exit 0
	   ;;

    *):
	echo -e "Unknown component \"$COMPONENT\"."
	echo "Use '$0 help' for usage instructions."
	exit
	;;
esac
